//
// ARM hardware CRC32.
// compiled with: clang++ -march=armv8+crc
//
// Computes the CRC32 of the input using ARM HW CRC.
// The ARM Neon __crc32 intrinsic peculiarly reverses the bit order of it's
// input argument CRC and Character values before applying the CRC algorithm
// To retain compatibility with Unix cksum CRC32, the following is done:
// * When updating the CRC with a character, reverse the bit-order of the character
//   using the LUT below.
// * After finalising the checksum, the 32-bit result needs to be bit-order reversed
//   before (or after) bit inversion required by Unix cksum.
//
// Performance note: Benchmarking on at Raspberry Pi 3 B+, this implementation
// takes about 7 times longer to compute a checksum than the default software cksum.
//
#include <iostream>
#include <string>
#include <fstream>
#include <arm_acle.h>
#include <arm_neon.h>

using namespace std;

// LUT of reversed bit patterns for uint8_t.
static uint8_t REV_U8[256] = {
    0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0, 0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0,
    0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8, 0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8,
    0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4, 0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4,
    0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec, 0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc,
    0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2, 0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2,
    0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea, 0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa,
    0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6, 0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6,
    0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee, 0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe,
    0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1, 0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1,
    0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9, 0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9,
    0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5, 0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5,
    0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed, 0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd,
    0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3, 0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,
    0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb, 0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,
    0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7, 0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,
    0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef, 0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff
};


// Reverse a uint32_t
static uint32_t rev_u32(const uint32_t a) {
    uint32_t x = a;
	x = (((x & 0xaaaaaaaa) >> 1) | ((x & 0x55555555) << 1));
	x = (((x & 0xcccccccc) >> 2) | ((x & 0x33333333) << 2));
	x = (((x & 0xf0f0f0f0) >> 4) | ((x & 0x0f0f0f0f) << 4));
	x = (((x & 0xff00ff00) >> 8) | ((x & 0x00ff00ff) << 8));
    return ((x >> 16) | (x << 16));
}

class Crc32 {
public:
    Crc32(uint32_t seed = 0) : crc{seed} {}

    void update(const char* fname) {
        ifstream ifs {fname, ios::binary};
        if (!ifs) return;

        update(ifs);
    }

    void update(istream& in) {
        uint8_t ch;
        ch = in.get();
        for (; in; count++) {
            crc = crc32(crc, ch);
            ch = in.get();
        }
    }

    uint32_t digest(void) const {
        auto crc {this->crc};
        auto c {count};
        while (c) {
            crc = crc32(crc, c & 0xff);
            c >>= 8;
        }
        return ~rev_u32(crc);
    }

    friend ostream& operator<<(ostream& out, const Crc32& crc) {
        out << crc.digest() << " " << crc.count;
        return out;
    }

private:
    uint32_t crc;
    size_t count {0};
    const char* fname;

    inline uint32_t crc32(uint32_t crc, uint8_t ch) const {
        return __crc32b(crc, REV_U8[ch]);
    }
};

static void calc_crc(const char* fname) {
    auto crc {Crc32()};
    if (fname == nullptr || string(fname) == "-") {
        crc.update(cin);
    } else {
        crc.update(fname);
    }
    cout << crc;
    if (fname != nullptr) cout << " " << fname;
    cout << endl;
}

static void usage() {
    cout <<
    "Usage: cksum [FILE]...\n" <<
    "  or:  cksum [OPTION]\n" <<
    "Print CRC checksum and byte counts of each FILE.\n" <<
    "\n" <<
    "      --help     display this help and exit\n" <<
    "      --version  output version information and exit\n" <<
    "\n" <<
    "Compute CRC32 compatible with Unix cksum(1) program.\n" <<
    "This version uses ARM Neon hardware 32bit CRC.\n";
}

static void version() {
    cout <<
    "cksum 0.1\n" <<
    "Copyright (C) 2020 Bootes16\n" <<
    "License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\n" <<
    "This is free software: you are free to change and redistribute it.\n" <<
    "There is NO WARRANTY, to the extent permitted by law.\n";
}

int main(int argc, char* argv[]) {
    if (argc == 1) calc_crc(nullptr);
    for (int i = 1; i < argc; i++) {
        auto arg = string(argv[i]);

        if (arg == "--help") {
            usage();
            return 0;
        }

        if (arg == "--version") {
            version();
            return 0;
        }

        calc_crc(argv[i]);
    }
}

